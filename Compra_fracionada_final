// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Contrato do Comprador
contract CompradorContract {
    mapping(address => string) public carteiras;
    mapping(address => uint256) public tokensParciais;

    function setCarteiraPublica(string memory carteira) public {
        carteiras[msg.sender] = carteira;
    }

    function comprarTokensParciais(uint256 quantidade) public {
        require(quantidade > 200, "A quantidade deve ser maior que zero");
        tokensParciais[msg.sender] += quantidade;
    }

    function queimarTokens(uint256 quantidade) public {
        require(tokensParciais[msg.sender] >= quantidade, "Quantidade de tokens insuficiente para queimar");
        tokensParciais[msg.sender] -= quantidade;
    }
}

// Contrato de Geração de Tokens
contract TokenGenerationContract {
    address public proprietario;
    uint256 public taxa;
    mapping(address => uint256) public tokensGerados;
    mapping(address => uint256) public tempoDeGeracao;

    event TokensGerados(address comprador, uint256 quantidade, uint256 tempoLimite);
    event TokensTransferidos(address origem, address destino, uint256 quantidade);

    modifier apenasProprietario {
        require(msg.sender == proprietario, "Apenas o proprietário pode chamar esta função");
        _;
    }

    constructor(uint256 _taxa) {
        proprietario = msg.sender;
        taxa = _taxa;
    }

    function gerarTokens(address comprador, uint256 quantidade, uint256 tempoLimite) public payable apenasProprietario {
        require(msg.value >= taxa, "Valor insuficiente para gerar tokens");
        proprietario.transfer(msg.value);

        tokensGerados[comprador] += quantidade;
        tempoDeGeracao[comprador] = tempoLimite;

        emit TokensGerados(comprador, quantidade, tempoLimite);
    }
    
    function transferirTokens(address carteiraDestino, uint256 quantidade) public apenasProprietario {
        require(quantidade > 0, "A quantidade deve ser maior que zero");
        // Envio simples de tokens para a carteira destino
        // Atenção: certifique-se de que há saldo suficiente no contrato para realizar a transferência
        payable(carteiraDestino).transfer(quantidade);
        emit TokensTransferidos(address(this), carteiraDestino, quantidade);
    }
}

// Contrato de Interoperabilidade
contract Interoperabilidade {
    CompradorContract public contratoComprador;
    TokenGenerationContract public contratoToken;

    constructor(address _contratoComprador, address _contratoToken) {
        contratoComprador = CompradorContract(_contratoComprador);
        contratoToken = TokenGenerationContract(_contratoToken);
    }

    function conectarComprador(string memory carteiraPublica, uint256 quantidadeDesejada) public {
        require(bytes(carteiraPublica).length > 0, "A carteira do comprador deve ser fornecida");
        contratoComprador.setCarteiraPublica(carteiraPublica);
        // Chamar a função de transferência de tokens do contrato TokenGenerationContract
        contratoToken.transferirTokens(address(this), quantidadeDesejada);
        // Queimar uma quantidade igual de tokens na carteira do comprador
        contratoComprador.queimarTokens(quantidadeDesejada);
    }
}
